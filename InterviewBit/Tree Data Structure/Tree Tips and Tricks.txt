1. Iterative - Inorder, PreOrder and Postorder
  - Use stack to mimic recursion 
  - Inorder 
      --> Push root to stack, change root to root->left, if root is null, pop the top element and print, change root to top->right
  - Preorder 
      --> Pop from stack and print. If top->right is not null, add it to stack, If top->left is not null, add it to stack
  - Postorder
      --> Use two stacks or below method
      --> The same logic for PreOrder with a little modification i.e. Add Left Child Before Right Child will give the order which is reverse of expected postorder.  Reverse this to get the expected solution. 
  
2.  Zig Zag Level Order Traversal Bt 
  - Use the same logic for as for Level order traversal. Just swap the output for alternating rows.

3.  Vertical Order traversal of Binary Tree
  - Do level order, root will have horizontal distance = 0, for left child hd = parent.hd - 1 and for right child hd = parent.hd + 1
  - Store this in a map with hd as key.
  
4.  Path Sum, Root to Leaf Paths With Sum
  - if root is null return , else if leaf node check for sum, if sum matches add it to result
  - left || right
  
5.  Max Depth Of Binary Tree
  - if root is null return 0
  - 1 + max(leftDepth, rightDepth)
  
6.  Min Depth Of Binary Tree 
  -
  - Can use BFS

7.  Balanced Binary Tree
  - Use recursive approach, check depth of left subtree, right subtree for each node, if difference between them is > 1, it's not balanced 
  - Better approach O(N) - Refer
    - https://leetcode.com/problems/balanced-binary-tree/discuss/35691/The-bottom-up-O(N)-solution-would-be-better
    - https://www.youtube.com/watch?v=nOcFiGl5Vy4
  
8.  Identical Binary Trees, Symmetric Binary Tree
  - Straightforward 
  
9.  Inorder Traversal of Cartesian Tree
  - In each iteration find max of elements between start and end index and make that as root element, repeat for left and right subtree with corresponding start and end index

10. Sorted Array To Balanced BST
  - Start from mid, recurse for left and right subtree.
  
11. Binary Tree From Inorder And Postorder
  - The the basic idea is to take the last element in postorder array as the root, find the position of the root in the inorder array; then locate the range for left sub-tree and right sub-tree and do recursion. Use a unordered map to record the index of root in the inorder array
  
12. Construct Binary Tree From Inorder And Preorder
  - Same as above.

13. Kth Smallest Element In Tree
  - Store and inorder traversal in an array and return the kth element. O(n) time and O(n) space complexity
  - All elements smaller than root will be in the left subtree, and all elements greater than root will be in the right subtree. 
This means we need not even explore the right subtree till we have explored everything in the left subtree. Or in other words, we go to the right subtree only when the size of left subtree + 1 ( root ) < k.

14. BST Iterator and 2 Sum Binary Tree
  - https://leetcode.com/problems/two-sum-iv-input-is-a-bst/discuss/106063/C%2B%2B-Clean-Code-O(n)-time-O(lg-n)-space-BinaryTree-Iterator


  
