1. Iterative - Inorder, PreOrder and Postorder
  - Use stack to mimic recursion 
  - Inorder 
      --> Push root to stack, change root to root->left, if root is null, pop the top element and print, change root to top->right
  - Preorder 
      --> Pop from stack and print. If top->right is not null, add it to stack, If top->left is not null, add it to stack
  - Postorder
      --> Use two stacks or below method
      --> The same logic for PreOrder with a little modification i.e. Add Left Child Before Right Child will give the order which is reverse of expected postorder.  Reverse this to get the expected solution. 
  
2.  Zig Zag Level Order Traversal Bt 
  - Use the same logic for as for Level order traversal. Just swap the output for alternating rows.

3.  Vertical Order traversal of Binary Tree
  - Do level order, root will have horizontal distance = 0, for left child hd = parent.hd - 1 and for right child hd = parent.hd + 1
  - Store this in a map with hd as key.
  
4.  Path Sum, Root to Leaf Paths With Sum
  - if root is null return , else if leaf node check for sum, if sum matches add it to result
  - left || right
  
5.  Max Depth Of Binary Tree
  - if root is null return 0
  - 1 + max(leftDepth, rightDepth)
  
6.  Min Depth Of Binary Tree 
  -
  - Can use BFS

7.  Balanced Binary Tree
  - Use recursive approach, check depth of left subtree, right subtree for each node, if difference between them is > 1, it's not balanced 
  - Better approach O(N) - Refer
    - https://leetcode.com/problems/balanced-binary-tree/discuss/35691/The-bottom-up-O(N)-solution-would-be-better
    - https://www.youtube.com/watch?v=nOcFiGl5Vy4
  
8.  Identical Binary Trees, Symmetric Binary Tree, Invert the Binary Tree
  - Straightforward 
  
9.  Inorder Traversal of Cartesian Tree
  - In each iteration find max of elements between start and end index and make that as root element, repeat for left and right subtree with corresponding start and end index

10. Sorted Array To Balanced BST
  - Start from mid, recurse for left and right subtree.
  
11. Binary Tree From Inorder And Postorder
  - The the basic idea is to take the last element in postorder array as the root, find the position of the root in the inorder array; then locate the range for left sub-tree and right sub-tree and do recursion. Use a unordered map to record the index of root in the inorder array
  
12. Construct Binary Tree From Inorder And Preorder
  - Same as above.

13. Kth Smallest Element In Tree
  - Store and inorder traversal in an array and return the kth element. O(n) time and O(n) space complexity
  - All elements smaller than root will be in the left subtree, and all elements greater than root will be in the right subtree. 
This means we need not even explore the right subtree till we have explored everything in the left subtree. Or in other words, we go to the right subtree only when the size of left subtree + 1 ( root ) < k.

14. BST Iterator and 2 Sum Binary Tree
  - https://leetcode.com/problems/two-sum-iv-input-is-a-bst/discuss/106063/C%2B%2B-Clean-Code-O(n)-time-O(lg-n)-space-BinaryTree-Iterator

15. Flatten Binary Tree to Linked List
  - Find the pre-order traversal and set each node's right pointer to the next node in pre-order. Using extra memory the solution is straightforward
  - Another simple and elegant solution, which doesn't need any extra memory or DS is given in below link:
  https://leetcode.com/problems/flatten-binary-tree-to-linked-list/discuss/37010/Share-my-simple-NON-recursive-solution-O(1)-space-complexity!
  - The idea in above link is a variation of Morris tree traversal 
  
16. Recover Binary Search Tree
  - Solution with O(n) extra space is pretty straight forward
  - For space efficient solution morris inorder traversal can be used. Refer below links :
    https://leetcode.com/problems/recover-binary-search-tree/discuss/32562/Share-my-solutions-and-detailed-explanation-with-recursiveiterative-in-order-traversal-and-Morris-traversal
    https://leetcode.com/problems/recover-binary-search-tree/discuss/32535/No-Fancy-Algorithm-just-Simple-and-Powerful-In-Order-Traversal
    
    
  
16. Least Common Ancestor
  - Linear solution using path calculation :
    1) Find path from root to n1 and store it in a vector or array.
    2) Find path from root to n2 and store it in another vector or array.
    3) Traverse both paths till the values in arrays are same. Return the common element just before the mismatch
  
  - Linear solution using recursion : We traverse from the bottom, and once we reach a node which matches one of the two nodes, we pass it up to its parent. The parent would then test its left and right subtree if each contain one of the two nodes. If yes, then the parent must be the LCA and we pass its parent up to the root. If not, we pass the lower node which contains either one of the two nodes (if the left or right subtree contains either p or q), or NULL (if both the left and right subtree does not contain either p or q) up.
