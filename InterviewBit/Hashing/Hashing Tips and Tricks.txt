1.  2 Sum
    - Store each distinct element of array in an unordered_map, and check "target - currElement" in this map is each iteration.
    - Since we iterate from 0 to Size, saving only the first index for any distinct element will ensure it's minimal index 
    
2.  4 Sum 
    - An extension of 3 Sum problem (solved in Two Pointers) 
    - Handle duplicates

3.  Equal (A+B = C+D) 
    - Brute force O(N^4)
    - Maintain a unordered map for (A+B)
    - Run 2 nested loop - i to n-1, j=i+1 to n and check the if the sum A+B already exists, check if the solution is valid and 
     if it is valid, store the two pairs in the result list
    - Sort the list and return the first element

4.  Copy List
    - Using Map
        - Use an unordered_map to store the old to new node mapping
        - Copy the next and random pointers for the new nodes using this map
    
    -Without Map (Using 2 traversals of the list)
        - Create a new node for each existing node and join them together eg: A->B->C will be A->A’->B->B’->C->C’
        - Copy the random links: for each new node n’, n’.random = n.random.next
        - Detach the list: basically n.next = n.next.next; n’.next = n’.next.next
      
5.  Largest Continuous Sequence Zero Sum, Subarray Sum Equals K (K can be anything)
    - https://stackoverflow.com/questions/5534063/zero-sum-subarray
