> Simple array dp
  1. Stairs 
  - Straight forward - Fibonacci
  
  2. Longest Increasing Subsequence 
  - O(n^2) solution. For each element check for all previos elments. LIS[i] = LIS[j] + 1 iff A[j] < A[i]. Find max from LIS array.
  - Can be solved in O(n logn) time. Refer : https://www.geeksforgeeks.org/longest-monotonically-increasing-subsequence-size-n-log-n/
  
  3. Length of Longest Subsequence ( length of longest subsequence which is first increasing then decreasing)
  - Use the same logic as above to find the increasing subsequence
  - Decreasing sequence is nothing but increasing sequence from the end of the array. So calculate LIS from end of the array
  - result = max (LIS[i] + LDS[i] - 1) for i = 0 to n
  
  4. Ways To Decode
  - https://www.youtube.com/watch?v=qli-JCrSwuk
  - https://leetcode.com/problems/decode-ways/discuss/30451/Evolve-from-recursion-to-dp

> 2D - String DP
  1. Edit Distance
  - Initial expression based on given operations is f(i, j) =  min { f(i+1, j) -- Add, f(i-1, j) -- Remove, f(i-1, j-1) - Replace}
  - Index i or j signify upto what point in the string we have come, like i = 4 means till 5th character in that string
  - Since in recursion, we can't go from current state to future like f(i, j) => f(i+1, j) (That would lead to cyclic recursions), we
    modify the Add in i, since addition to i means j has extra charater that we are trying to match, so instead we can remove that from j.
  - New Expression => dp[i,j] = min { dp[i, j-1], dp[i-1, j], dp[i-1,j-1]; 
  - Must watch : https://www.youtube.com/watch?v=XJ6e4BQYJ24
  
  2. Repeating Sub-Sequence
  - Same as Edit distance. Compare with same string and check if A[i] == A[j] for i != j
  
  3. Distinct Subsequences
  - If the current character in S doesn't equal to current character T, then we have the same number of distinct subsequences as we had
    without the new character. i.e dp[i][j] = dp[i][j-1] if S[i] != T[j]
  - If the current character in S equal to the current character T, then the distinct number of subsequences: the number we had before 
    plus the distinct number of subsequences we had with less longer T and less longer S. 
    i.e dp[i][j] = dp[i-1][j-1] + dp[i][j-1] if S[i] == T[j]
  - https://leetcode.com/problems/distinct-subsequences/discuss/37387/A-DP-solution-with-clarification-and-explanation
  
  4. Interleaving Strings
  - https://www.geeksforgeeks.org/find-if-a-string-is-interleaved-of-two-other-strings-dp-33/
  
  5. Regular Expression Match
  - A variation of below problem. In case of '*' just consider T[i-1][j] || T[i][j-1].
  
  6. Regular Expression II
  - First you simply the pattern by replacing consecutive '*' with single '*'
  - Let index i be for the text and index j for the pattern. An empty string would match with empty pattern so dp[0][0] = 'T'
  - An empty pattern wouldn't match with any text having length > 0. So T[i][0] = 'F' for all i > 0 and i < length of text
  - A non empty pattern will match with an empty text only if the pattern is of type a*, a*b* etc.
  - For all other cases, the equation is :
    T[i][j] = { 
                T[i-1][j-1] if current char in text and pattern are equal OR current char in pattern is '?'
                T[i][j-2] if current char in pattern is '*' and we want zero occurrences of previous character
                T[i-1][j] if current char in pattern is '*' and current char in text is equal to prev char in pattern or prev char in                    pattern is '?'
                False if  current char in text and pattern don't match 
              }
            
