> Simple array dp
  1. Stairs 
  - Straight forward - Fibonacci
  
  2. Longest Increasing Subsequence 
  - O(n^2) solution. For each element check for all previos elments. LIS[i] = LIS[j] + 1 iff A[j] < A[i]. Find max from LIS array.
  - Can be solved in O(n logn) time. Refer : https://www.geeksforgeeks.org/longest-monotonically-increasing-subsequence-size-n-log-n/
  
  3. Length of Longest Subsequence ( length of longest subsequence which is first increasing then decreasing)
  - Use the same logic as above to find the increasing subsequence
  - Decreasing sequence is nothing but increasing sequence from the end of the array. So calculate LIS from end of the array
  - result = max (LIS[i] + LDS[i] - 1) for i = 0 to n
  
  4. Ways To Decode
  - https://www.youtube.com/watch?v=qli-JCrSwuk
  - https://leetcode.com/problems/decode-ways/discuss/30451/Evolve-from-recursion-to-dp
